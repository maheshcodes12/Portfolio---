"use client";

import Link from "next/link";
import Image from "next/image";

export default function Home() {
  const newsItems = [
    {
      date: "May 2025",
      text: "Invited to Chair Student Research Competition at CGO 2026",
    },
    {
      date: "March 2025",
      text: "Presented conference talk on LLM-Vectorizer at CGO 2025",
    },
    {
      date: "Feb 2025",
      text: "Gave invited LSD seminar at UCSC",
      link: "https://lsd.ucsc.edu/lsd-seminar/2025wi/",
    },
  ];

  return (
    <main className="min-h-screen scroll-smooth text-[15px] md:text-base bg-white">
      {/* Header Section */}
      <section className="px-4 py-6 md:px-8 md:py-8">
        <div className="max-w-5xl mx-auto flex flex-col justify-center md:flex-row items-center md:items-start md:gap-6 ">
          <div className="relative w-28 h-28 md:w-36 md:h-36 rounded-full overflow-hidden border-2 border-gray-700 shadow-md mb-4 md:mb-0">
            <Image
              src="/juhitaneja.jpeg"
              alt="Jubi Taneja"
              fill
              className="object-cover"
              priority
            />
          </div>
          <div className="flex flex-col items-center h-36 md:items-start text-center md:text-left justify-center w-full">
            <h1 className="text-2xl md:text-3xl font-bold text-gray-900">Jubi Taneja</h1>
            <h2 className="text-base md:text-lg text-gray-600 mt-1 mb-2">PhD in Computer Science</h2>
            <Link
              href="/contact"
              className="px-4 py-1.5 bg-gray-900 text-white rounded-md hover:bg-gray-800 transition-colors text-sm"
            >
              Contact Me
            </Link>
          </div>
        </div>
      </section>

      {/* About Me */}
      <section className="px-4 py-4 md:px-8 md:py-6">
        <div className="max-w-5xl mx-auto text-gray-700 leading-relaxed text-sm space-y-4 text-justify">
          <p>
            Jubi Taneja is a Research Engineer at Microsoft Research whose work lies at the intersection of AI, Compiler Optimizations, and Formal Verification. Her research focuses on building trustworthy compiler optimizations and leveraging LLMs to advance code generation technologies, all while ensuring correctness through formal methods.
          </p>
          <p>
            At Microsoft Research, Jubi leads efforts to make AI-assisted code generation reliable and verifiable. She built a PTX-level kernel equivalence checker based on symbolic execution to formally verify that optimized GPU kernelsâ€”generated by large language models or handwrittenâ€”preserve the semantics of their original unoptimized implementations. She also created LLM-Vectorizer, a framework that prompts large language models to produce vectorized loops and formally verifies the transformation using Alive2 (SMT solver-based tool), presented at CGO 2025. Additionally, she contributed to Accera, a compiler for accelerating AI models on heterogeneous hardware, targeting CPUs and GPUs.
          </p>
          <p>
            Jubi earned her Ph.D. in Computer Science from the University of Utah, where she applied formal semantics and solver-based techniques to improve compiler reliability and optimization effectiveness. She was advised by Prof. John Regehr. She contributed to Souper, a program synthesis-based superoptimizer for LLVM IR and advanced techniques for verifying the soundness and precision of LLVMâ€™s static analyses, earning her the Distinguished Paper and Best Student Presentation Awards at CGO 2020.
          </p>
          <p>
            Her interest in compiler research began during her undergraduate studies, when she interned at IIT Bombay, contributing to incremental compiler construction and specification-based code generation techniques. She later joined IIT Bombay as a Junior Research Fellow, where she extended dataflow analysis techniques in GCC. Dr. Taneja earned her Bachelor of Technology in Computer Science from the University College of Engineering, Punjabi University, where she received the University Gold Medal.
          </p>
          <p>
            Beyond her technical contributions, Jubi is actively engaged in the programming languages and systems research community. She serves as a mentor in SIGPLAN-M, co-leads initiatives such as Women in Research and Moms in Research at Microsoft Research, and co-hosts the Women in Compilers and Tools Meetup Series. She has served on numerous program committees, including PLDI, CGO, and LCTES, and continues to champion mentorship and diversity within the research community.
          </p>
          <p>
            Jubi envisions a future where compiler development evolves beyond manual engineering and hand-crafted optimizations to meet the demands of an increasingly diverse ecosystem of AI accelerators. As hardware innovation accelerates, traditional compiler design methodologies struggle to keep pace with new backends and rapidly changing workloads. She believes the next generation of compilers will be self-learning systems, where large language models and program synthesis techniques collaborate in feedback loopsâ€”LLMs proposing optimizations, while formal verification and reinforcement learning provide correctness and performance feedback, enabling the models to self-reason and self-improve. Her research aims to pioneer this paradigm shift by exploring neuro-symbolic compiler construction, where machine learning accelerates discovery and adaptation, while rigorous formal verification ensures reliability. This long-term vision seeks to democratize high-performance compilation, making it scalable, trustworthy, and responsive to the needs of emerging AI-driven computing platforms.
          </p>
        </div>
      </section>

      {/* Research Interests */}
      <section className="px-4 py-4 md:px-8 md:py-5 border-t border-gray-100">
        <div className="max-w-5xl mx-auto">
          <h2 className="text-lg font-semibold text-gray-900 mb-2">ðŸ§ª Research Interests</h2>
          <div className="flex flex-wrap gap-2">
            {["AI for Compilers", "Compilers", "Compiler optimizations", "Formal Methods", "Superoptimization"].map((interest) => (
              <span
                key={interest}
                className="px-3 py-1 bg-gray-100 text-gray-800 text-sm font-medium rounded-md shadow-sm"
              >
                {interest}
              </span>
            ))}
          </div>
        </div>
      </section>

      {/* News */}
      <section className="px-4 py-4 md:px-8 md:py-5 border-t border-gray-100">
        <div className="max-w-5xl mx-auto">
          <h2 className="text-lg font-semibold text-gray-900 mb-2">ðŸ“° Recent News</h2>
          <div className="space-y-2">
            {newsItems.map((item, index) => (
              <div key={index} className="bg-white rounded-md border border-gray-200 p-3 text-sm">
                <p className="text-gray-500 font-medium">{item.date}</p>
                <p className="text-gray-800">
                  {item.text}
                  {item.link && (
                    <>
                      {" "}
                      <a
                        href={item.link}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-600 underline"
                      >
                        link
                      </a>
                    </>
                  )}
                </p>
              </div>
            ))}
          </div>
        </div>
      </section>
    </main>
  );
}
